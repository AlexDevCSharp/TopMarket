@page "/products/search"
@inject IProductsRepository productsRepository
@inject ICategoryRepository categoryRepository
@inject NavigationManager navigationManager

<h3>Search Products</h3>

<EditForm Model="filterProductsDTO">

    <div class="form-inline">
        <div class="form-group mb-2">
            <label for="title" class="sr-only">Title</label>
            <input type="text" class="form-control" id="title" placeholder="Product Title"
                   @bind-value="filterProductsDTO.Title" @bind-value:event="oninput"
                   @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))" />
        </div>
        @*<div class="form-group mx-sm-3 mb-2">
            <select class="form-control" @bind="filterProductsDTO.CategoryId">
                <option value="0">
                    --Select a Genre--
                </option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>*@

        <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="SearchForMovies">Filter</button>
        <button type="button" class="btn btn-danger mb-2" @onclick="Clear">Clear</button>
    </div>
</EditForm>

<ProductsList ProductDiscountDto="ProductDiscountDto"></ProductsList>

    <Pagination CurrentPage="filterProductsDTO.Page" TotalAmountPages="totalAmountPages"
                SelectedPage="SelectedPage" />

@code {
    //private List<Product> Products;
    List<ProductDiscountDto> ProductDiscountDto;

    private FilterProductsDTO filterProductsDTO = new FilterProductsDTO();
    private int totalAmountPages;
    //private List<Category> Categories = new List<Category>();

    protected async override Task OnInitializedAsync()
    {
        var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);
        //Categories = await categoryRepository.GetCategories();
        if (queryStrings != null)
        {
            FillFilterWithQueryStrings(queryStrings);
        }
        await LoadProducts();
    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("categoryId"))
        {
            filterProductsDTO.CategoryId = int.Parse(queryStrings["categoryId"]);
        }

        if (queryStrings.ContainsKey("title"))
        {
            filterProductsDTO.Title = queryStrings["title"];
        }

        //if (queryStrings.ContainsKey("intheaters"))
        //{
        //    filterProductsDTO.UpcomingReleases = bool.Parse(queryStrings["intheaters"]);
        //}

        //if (queryStrings.ContainsKey("upcomingReleases"))
        //{
        //    filterProductsDTO.UpcomingReleases = bool.Parse(queryStrings["upcomingReleases"]);
        //}

        if (queryStrings.ContainsKey("page"))
        {
            filterProductsDTO.Page = int.Parse(queryStrings["page"]);
        }
    }

    private async Task SelectedPage(int page)
    {
        filterProductsDTO.Page = page;
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            navigationManager.NavigateTo("products/search" + queryString);
        }

        var paginatedResponse = await productsRepository.GetProductsFiltered(filterProductsDTO);
        ProductDiscountDto = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["categoryId"] = filterProductsDTO.CategoryId.ToString();
        queryStringsDict["title"] = filterProductsDTO.Title ?? "";
        //queryStringsDict["intheaters"] = filterProductsDTO.InTheaters.ToString();
        //queryStringsDict["upcomingReleases"] = filterProductsDTO.UpcomingReleases.ToString();
        queryStringsDict["page"] = filterProductsDTO.Page.ToString();

        var defaultValue = new List<string>() { "false", "", "0" };

        // categoryId=4&title=apple....

        return string.Join("&", queryStringsDict
        .Where(x => !defaultValue.Contains(x.Value.ToLower()))
        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

    }

    private async Task SearchForMovies()
    {
        await LoadProducts();

    }

    private async Task Clear()
    {
        filterProductsDTO.Title = "";
        filterProductsDTO.CategoryId = 0;
        await LoadProducts();
    }

    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForMovies();
        }
    }
}
