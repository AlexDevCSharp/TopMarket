@inject ICountryRepository countryRepository
@inject IStateRepository stateRepository

<EditForm Model="Person" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="name">Name</label>
        <div>
            <InputText class="form-control" @bind-Value="@Person.Name" />
            <ValidationMessage For="@(() => Person.Name)" />
        </div>
    </div>

    <div class="form-group">
        <label>Country:</label>
        <div>
            <InputSelectNumber class="form-control"
                               ValueChanged="@((int value) => CountryHasChanged(value))"
                               ValueExpression="@(() => countryId)"
                               Value="@countryId">
                <option value="0">--Select a country--</option>
                @foreach (var item in Countries)
                {
@if (item.Id == countryId)
{
<option selected value="@item.Id">@item.Name</option> }
                        else
                        {
<option value="@item.Id">@item.Name</option>}}
            </InputSelectNumber>
        </div>
    </div>

    <div class="form-group">
        <label>State:</label>
        <div>
            <InputSelectNumber class="form-control"
                               @bind-Value="Person.StateId">
                <option value="0">--Select a state--</option>
                @foreach (var item in States)
                {
@if (item.Id == Person.StateId)
{
<option selected value="@item.Id">@item.Name</option> }
                        else
                        {
<option value="@item.Id">@item.Name</option>}}
            </InputSelectNumber>
            <ValidationMessage For="@(() => Person.StateId)" />
        </div>
    </div>

    <div class="form-group">
        <label for="name">Date of Birth</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Person.DateOfBirth" />
            <ValidationMessage For="@(() => Person.DateOfBirth)" />
        </div>
    </div>

    <div class="form-group">
        <InputImg Label="Picture" OnSelectedImage="PictureSelected" ImageURL="@imageURL" />
    </div>

    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="Person.Biography"
                       Label="Biography"
                       For="@(() => Person.Biography)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>

@code {
    [Parameter] public Person Person { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    string imageURL;
    private List<Country> Countries = new List<Country>();
    private List<State> States = new List<State>();
    private int countryId = 0;


    protected override async Task OnInitializedAsync()
    {
        if (Person.State != null)
        {
            countryId = Person.State.CountryId;
            await LoadStates(countryId);
        }

        Countries = await countryRepository.GetCountries();

        //Countries = await http.GetJsonAsync<List<Country>>("api/countries");

        if (!string.IsNullOrEmpty(Person.Picture))
        {
            imageURL = Person.Picture;
            Person.Picture = null;
        }
    }

    private void PictureSelected(string imageBase64)
    {
        Person.Picture = imageBase64;
        imageURL = null;
        Console.WriteLine(imageBase64);
    }

    private async Task CountryHasChanged(int value)
    {
        Person.StateId = 0;
        countryId = value;

        if (value == 0)
        {
            States.Clear();
        }
        else
        {
            await LoadStates(value);
        }
    }

    private async Task LoadStates(int countryId)
    {
        States = await stateRepository.GetStatesForCountries(countryId);

        //States = await http.GetJsonAsync<List<State>>($"api/countries/{countryId}/states");
    }
}
