@inject ICartRepository cartRepository

<div class="col-lg-3">
    <div class="w3-card-4 w3-dark-grey">
        <div class="w3-container w3-center" style="height:100%">
            <h4><a href="@productURL">@ProductDiscountDto.Product.TitleBrief</a></h4>
            <img src="@ProductDiscountDto.Product.Poster" alt="Avatar" style="width:200px; height:200px;">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    @*<h5></h5>
                    <div>
                        <a class="w3-button w3-green" href="/products/edit/@ProductDiscountDto.Product.Id">edit</a>
                        <button class="w3-button w3-red"
                                @onclick="@(() => DeleteProduct.InvokeAsync(ProductDiscountDto.Product))">
                            delete
                        </button>
                    </div>*@

                </Authorized>
            </AuthorizeView>
            <h5></h5>

            <div>
                <button class="btn btn-danger" @onclick="@(() => Remove(ProductDiscountDto.Product))">-</button>
                @quantity
                <button class="btn btn-danger" @onclick="@(() => AddMore(ProductDiscountDto.Product))">+</button>
            </div>
            <h5>Amount:@totalAmount gramm</h5>
            @*<button class="w3-button w3-green"
                        @onclick="@(() => AddToCart.InvokeAsync(Product))">
                    Add
                </button>*@
        </div>
        <h5></h5>
        <div class="w3-container">
            <div><a href="@productURL">$@ProductDiscountDto.LastPrice for @ProductDiscountDto.Product.Weight gramm</a></div>
            @*<h5></h5>
                <div><a href="@productURL">@Product.TitleBrief</a></div>*@
        </div>
    </div>
    <h5></h5>
</div>
<style>
</style>

@code {
    [Parameter] public ProductDiscountDto ProductDiscountDto { get; set; }
    [Parameter] public EventCallback<Product> DeleteProduct { get; set; }
    //[Parameter] public EventCallback<Product> DeleteProduct { get; set; }
    [Parameter] public EventCallback<Product> AddToCart { get; set; }
    private string productURL = string.Empty;
    private int quantity;
    private int totalAmount;

    protected override async Task OnInitializedAsync()
    {
        productURL = $"product/{ProductDiscountDto.Product.Id}/{ProductDiscountDto.Product.Title.Replace(" ", "-")}";
        var cartTotal = await cartRepository.GetCart();
        bool isProductInCart = cartTotal.Products.Any(x => x.Product.Id == ProductDiscountDto.Product.Id) ? true : false;
        if (isProductInCart)
        {
            quantity = cartTotal.Products.FirstOrDefault(x => x.Product.Id == ProductDiscountDto.Product.Id).Quantity;
            totalAmount = quantity * ProductDiscountDto.Product.Weight;
        }
    }
    private async Task AddMore(Product Product)
    {
        await cartRepository.Add(Product.Id);
        var cartTotal = await cartRepository.GetCart();
        bool isProductInCart = cartTotal.Products.Any(x => x.Product.Id == Product.Id) ? true : false;
        if (isProductInCart)
        {
            quantity = cartTotal.Products.FirstOrDefault(x => x.Product.Id == Product.Id).Quantity;
            totalAmount = quantity * Product.Weight;
        }
    }

    private async Task Remove(Product Product)
    {
        var cartTotal = await cartRepository.GetCart();
        bool isProductInCart = cartTotal.Products.Any(x => x.Product.Id == Product.Id) ? true : false;
        if (isProductInCart)
        {
            if (cartTotal.Products.FirstOrDefault(x => x.Product.Id == Product.Id).Quantity > 1)
            {
                await cartRepository.Remove(Product.Id, 1);
                cartTotal = await cartRepository.GetCart();
                quantity = cartTotal.Products.FirstOrDefault(x => x.Product.Id == Product.Id).Quantity;
                totalAmount = quantity * Product.Weight;
            }
            else if (cartTotal.Products.FirstOrDefault(x => x.Product.Id == Product.Id).Quantity == 1)
            {
                await cartRepository.Remove(Product.Id, 0);
                cartTotal = await cartRepository.GetCart();
                quantity = 0;
                totalAmount = 0;
            }
        }
    }
}
